name: 'Stage 1 AKS Cluster'
on: [workflow_dispatch, push]

jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_uniquename: ${{ secrets.UNIQUE_NAME }}
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./stage_1_AKS_Cluster
    outputs:
      aks: ${{ steps.tfout.outputs.aks }}
      rg: ${{ steps.tfout.outputs.rg }}
      acr_name: ${{ steps.tfout.outputs.acr_name }}
      acr_url: ${{ steps.tfout.outputs.acr_url }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - run: terraform init

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=terraform.tfplan

    - name: Terraform Apply
      id: apply
      # if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -no-color terraform.tfplan

    - name: Terraform Outputs
      id: tfout
      run: |
        tf=$(terraform output -no-color -json)
        echo "::set-output name=rg::$(echo $tf | jq -r .resource_group_name.value)"
        echo "::set-output name=aks::$(echo $tf | jq -r .aks_name.value)"
        echo "::set-output name=acr_name::$(echo $tf | jq -r .acr_name.value)"
        echo "::set-output name=acr_url::$(echo $tf | jq -r .acr_url.value)"